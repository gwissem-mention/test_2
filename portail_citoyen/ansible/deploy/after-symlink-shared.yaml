- name: Create .env.local file
  copy:
    dest: "{{ release_portal_path }}/.env.local"
    content: |
      APP_ENV={{ ansible_env.APP_ENV }}
      REDIS_HOST={{ ansible_env.REDIS_HOST }}
      FILE_CITIES={{ ansible_env.FILE_CITIES }}
      FILE_DEPARTMENTS={{ ansible_env.FILE_DEPARTMENTS }} 
      FILE_COUNTRIES={{ ansible_env.FILE_COUNTRIES }} 
      FILE_JOBS_MALE={{ ansible_env.FILE_JOBS_MALE }}
      FILE_JOBS_FEMALE={{ ansible_env.FILE_JOBS_FEMALE }}
      FILE_SERVICES={{ ansible_env.FILE_SERVICES }}
      FILE_CITIES_SERVICES={{ ansible_env.FILE_CITIES_SERVICES }}
      FILE_CITIES_UNITS={{ ansible_env.FILE_CITIES_UNITS }}
      FILE_UNITS_GN={{ ansible_env.FILE_UNITS_GN }}
      FILE_UNITS_PN={{ ansible_env.FILE_UNITS_PN }}
      FILE_NATIONALITIES={{ ansible_env.FILE_NATIONALITIES }}
      OODRIVE_BASE_URI={{ ansible_env.OODRIVE_BASE_URI }}
      OODRIVE_WORKSPACE={{ ansible_env.OODRIVE_WORKSPACE }}
      OODRIVE_OAUTH_CLIENT_ID={{ ansible_env.OODRIVE_OAUTH_CLIENT_ID }}
      FOLDER_ROTATION_COUNT={{ ansible_env.FOLDER_ROTATION_COUNT }}
      FOLDER_ROTATION_TRESHOLD={{ ansible_env.FOLDER_ROTATION_TRESHOLD }}
      OODRIVE_ROOT_FOLDER_ID={{ ansible_env.OODRIVE_ROOT_FOLDER_ID }}
      GOOGLE_MAPS_API_KEY={{ ansible_env.GOOGLE_MAPS_API_KEY }}
      ACCES_LIBRE_API_BASE_URI={{ ansible_env.ACCES_LIBRE_API_BASE_URI }}  
      ACCES_LIBRE_API_KEY={{ ansible_env.ACCES_LIBRE_API_KEY }}  

- name: Install vendors for prod env
  make:
    chdir: '{{ release_portal_path }}'
    target: vendor-prod

- name: Clear the cache
  make:
    chdir: '{{ release_portal_path }}'
    target: cache-clear
    params:
      APP_ENV: "{{ ansible_env.APP_ENV }}"

- name: Warm up the cache
  make:
    chdir: '{{ release_portal_path }}'
    target: cache-warmup
    params:
      APP_ENV: "{{ ansible_env.APP_ENV }}"

- name: Create DB if not exists
  make:
    chdir: '{{ release_portal_path }}'
    target: db-create
  register: create_db_output
  changed_when: create_db_output.stdout is not search('already exists. Skipped')

- name: Run migrations
  make:
    chdir: '{{ release_portal_path }}'
    target: db-migrate
  register: run_migrations_output
  changed_when: run_migrations_output.stdout is not search('No migrations to execute')
  
- name: Recreate referential database
  make:
      chdir: '{{ release_portal_path }}'
      target: referential-create
  when: force_referential_update
  
- name: Create referential extensions
  become: true
  become_user: postgres
  command: 'psql -d {{ referential_db }} -c "create extension if not exists unaccent"'
  
- name: Load fresh referentials
  make:
      chdir: '{{ release_portal_path }}'
      target: referential-load
  when: force_referential_update

- name: Install bundle assets
  command: '{{ release_console_path }} assets:install {{ release_public_path }} --symlink --no-debug'

- name: Install Node dependencies
  make:
    chdir: '{{ release_portal_path }}'
    target: install

- name: Install Webpack Encore assets
  make:
    chdir: '{{ release_portal_path }}'
    target: build

- name: Setup directory permissions for var/
  become: true
  file:
    path: "{{ release_portal_path }}/var"
    state: directory
    mode: 0777
    recurse: true
